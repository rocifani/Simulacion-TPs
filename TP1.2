import random 
from turtle import right
import numpy as np
import matplotlib.pyplot as plt
import statistics 
from statistics import fmean


resultados = []
capital_inicial = 25000
apuesta_inicial = 200
simulaciones = 5
tiradas = 200
valores_capital_m = []
valores_capital_d = []
valores_capital_p = []
ruleta = list(range(0, 37))
numeros_negros = [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35]

def girarRuleta(tiradas):
    numeros = []
    for i in range(tiradas):
      numero = random.choice(ruleta)
      numeros.append(numero)
    return numeros

def martingala(resultados, capital_inicial, apuesta_inicial):

    cap_total = []
    apuestas = []
    capital_martingala = capital_inicial - apuesta_inicial
    apuesta = apuesta_inicial

    for nro in resultados:
        apuestas.append(apuesta)
        cap_total.append(capital_martingala)
        if(nro in numeros_negros):
            capital_martingala += apuesta*2
            apuesta = apuesta_inicial
        else:
            apuesta = apuesta*2
            capital_martingala -= apuesta       
    
    return cap_total, apuestas 
    
def dalembert(resultados, capital_inicial, unidad_base):
    
    cap_total = []
    apuestas = []
    capital_dalembert = capital_inicial - unidad_base
    apuesta = unidad_base

    for nro in resultados:

        apuestas.append(apuesta)
        cap_total.append(capital_dalembert)

        if(nro in numeros_negros):
            capital_dalembert += apuesta*2
            if(apuesta != unidad_base):
                apuesta -= unidad_base
            capital_dalembert -= apuesta
        else:
            apuesta += unidad_base
            capital_dalembert -= apuesta
            
    return cap_total, apuestas

def Paroli(resultados, capital_inicial, unidad_base):
    
    cap_total = []
    a = []
    cont = 0
    capital_paroli = capital_inicial  - unidad_base
    apuesta = unidad_base

    for nro in resultados:

        a.append(apuesta)
        cap_total.append(capital_paroli)

        if(nro in numeros_negros):
            capital_paroli += apuesta*2
            cont += 1
            if (cont == 3):
                cont = 0
                apuesta = unidad_base
            else:
                apuesta *= 2 
            capital_paroli -= apuesta
        else:
            apuesta = unidad_base
            capital_paroli -= apuesta
            
    return cap_total, a 

def calcularFR(resultados, tiradas, simulaciones):
    frecuencias = []
    for j in range(0, simulaciones):
        frecuencias.append([])
        for i in range(0, tiradas):
            frecuencias[j].append(0)
        cont = 0
        for i in range(1, tiradas+1):
            if(resultados[j][i-1] in numeros_negros):
                cont += 1
            frecuencias[j][i-1] += cont/i

    frecuencias.append([])
    for i in range(0, tiradas):
        acc = 0
        for j in range(0, simulaciones):    
            acc += frecuencias[j][i]
        frecuencias[simulaciones].append(acc/simulaciones)
    
    return fr
    
def graficar(valores, capInicial, apuesta_min, giros, sim, title):
    
    fig, ax = plt.subplots(2)
    x = []
    fig.suptitle(title, fontsize=24)
    for i in range(giros):
        x.append(i)
    ax[0].axhline(y=capInicial, color='black', label = "Capital \ninicial")
    ax[0].axhline(y=0, color='black')
    ax[0].set_xlabel("Tiradas")
    ax[0].set_ylabel("Capital")
    plt.tight_layout()
    ax[1].axhline(y=apuesta_min, color='black', label = "Apuesta \nminíma")
    ax[1].set_xlabel("Tiradas")
    ax[1].set_ylabel("Apuestas")
    for i in range(0, sim*2):
        if(i%2 == 0):
            ax[0].plot(valores[i])
        else:
            ax[1].scatter(x, valores[i], s=5)
    ax[0].legend(bbox_to_anchor =(1.11, 0.6), ncol = 2)
    ax[1].legend(bbox_to_anchor =(1.12, 0.6), ncol = 2)
    plt.show()

def graficarFR(fr, sim):

    fig, ax = plt.subplots(2)
    fig.suptitle("Frecuencias relativas números negros", fontsize=24)
    ax[0].axhline(y=18/37, color='black', label = "Frecuencia \nesperada")
    ax[0].set_ylabel("Frecuencias relativas")
    ax[0].set_xlabel("Tiradas")
    plt.tight_layout()
    plt.tight_layout()
    ax[1].axhline(y=18/37, color='black', label = "Frecuencia \nesperada")
    ax[1].set_ylabel("Frecuencia relativa promedio")
    ax[1].set_xlabel("Tiradas")
    
    for i in range(0, sim):
        ax[0].plot(fr[i])
    ax[1].plot(fr[sim])
    ax[0].legend(bbox_to_anchor =(1.12, 0), ncol = 2)
    ax[0].set_ylim(0, 1)
    ax[1].set_ylim(0, 1)
    plt.show()

for i in range(0,5):
    resultados.append(girarRuleta(tiradas))
    valores_capital_m.extend(martingala(resultados[i], capital_inicial, apuesta_inicial))
    valores_capital_d.extend(dalembert(resultados[i], capital_inicial, apuesta_inicial))
    valores_capital_p.extend(Paroli(resultados[i], capital_inicial, apuesta_inicial))

fr = calcularFR(resultados, tiradas, simulaciones)
graficarFR(fr, simulaciones)
graficar(valores_capital_m, capital_inicial, apuesta_inicial, tiradas, simulaciones, "El sistema Martingala")
graficar(valores_capital_d, capital_inicial, apuesta_inicial, tiradas, simulaciones, "El sistema D'Alembert")
graficar(valores_capital_p, capital_inicial, apuesta_inicial, tiradas, simulaciones, "El sistema Paroli")
